
using LinearAlgebra # For the matrix manipulations and preprocessing.
using JuMP # For the optimization frame work.
using Test # Utility module for testing if code works as intended.
using MosekTools # The solver that we use.

include("Matrix_Examples_SEP.jl") # Import matrices Examples we are interested in.
include("moment_utils.jl")


testCode = true
if testCode
    d‚ÇÅ = 3
    d‚ÇÇ = 3
    t = 3
    r = 3
    n =d‚ÇÅ + d‚ÇÇ
    œÅ = genRandGSEPmatrix(d‚ÇÅ, d‚ÇÇ, r)
    MomMatExp  = GenMomMatDict(n, t)
    MonBase = GenMon(n, t)
    model = Model(Mosek.Optimizer)
    list_of_keys = [key for key in keys(MomMatExp) ]
    @variable(model, x[list_of_keys] )
end




""" L ‚â• 0 on M‚ÇÇ‚Çú(S^SEP_œÅ )
M((‚àöœÅ‚Çò‚Çê‚Çì - x‚Çñ¬≤)‚ãÖL) ‚â• 0
or
M((‚àöœÅ‚Çò‚Çê‚Çì - y‚Çñ¬≤)‚ãÖL) ‚â• 0 """
function genSEP_localizing_Constriaints(œÅ,t,x)
    sqrtœÅ‚Çò‚Çê‚Çì = sqrt(maximum(diag(œÅ)))
    n = Int(2*sqrt(size(œÅ)[1]))
    LMB = GenMon(n, t-1)
    nb_mon  = size(LMB)[1]
    LocConDictX = Dict()
    LocConDictY = Dict()
    for k in 1:n
        e‚Çñ = standardBase(n,k)
        # Constriant: diagonal of L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((‚àöœÅ‚Çò‚Çê‚Çì - x‚Çñ¬≤)‚ãÖL)
        LocConDictX[k] = [sqrtœÅ‚Çò‚Çê‚Çì*x[transpose(LMB[i,:] + LMB[j,:])] - x[transpose(LMB[i,:] + LMB[j,:] + 2*e‚Çñ)] for i in 1:nb_mon, j in 1:nb_mon ]
        # Constriant: diagonal of L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((‚àöœÅ‚Çò‚Çê‚Çì - y‚Çñ¬≤)‚ãÖL)
        LocConDictY[k] = [sqrtœÅ‚Çò‚Çê‚Çì*x[transpose(LMB[i,:] + LMB[j,:])] - x[transpose(LMB[i,:] + LMB[j,:] + 2*e‚Çñ)] for i in 1:nb_mon, j in 1:nb_mon ]
    end
    return LocConDictX, LocConDictY
end
if testCode
    @testset "genSEP_localizing_Constriaints" begin
        LocConDictX, LocConDictY = genSEP_localizing_Constriaints(œÅ,t,x)
    end
end




""" L ‚â• 0 on M‚ÇÇ‚Çú(S^SEP_œÅ )
 M((‚àöTrœÅ - ||x||¬≤)‚ãÖL) ‚â• 0
or
M((‚àöTrœÅ - ||y||¬≤)‚ãÖL) ‚â• 0 """
function genSEP_Tr_localizing_Constriaints(œÅ,t,x)
    sqrtTrœÅ = sqrt(sum(diag(œÅ)))
    n = Int(2*sqrt(size(œÅ)[1]))
    LMB = GenMon(n, t-1)
    d‚ÇÅ,d‚ÇÇ = Int(n/2),Int(n/2)
    nb_mon  = size(LMB)[1]

    LocConDictX = Dict()
    LocConDictY = Dict()

    normXsqr =  hcat(2*ones(1,d‚ÇÅ),zeros(1,d‚ÇÇ))
    normYsqr =  hcat(zeros(1,d‚ÇÅ),2*ones(1,d‚ÇÇ))

    normXsqr =  round.(Int, normXsqr)
    normYsqr =  round.(Int, normYsqr)

    # Constriant: L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((‚àöTrœÅ - ||x||¬≤)‚ãÖL)
    LocConDictX = [sqrtTrœÅ*x[transpose(LMB[i,:] + LMB[j,:])] -  sum( [x[transpose(LMB[i,:] + LMB[j,:] + 2*standardBase(n,k) )] for k in 1:d‚ÇÅ ])   for i in 1:nb_mon, j in 1:nb_mon]
    # Constriant:  L ‚âß 0 on ùëÄ(S·∂ú·µñ)   : M((‚àöTrœÅ - ||y||¬≤)‚ãÖL)
    LocConDictY = [sqrtTrœÅ*x[transpose(LMB[i,:] + LMB[j,:])] -  sum( [x[transpose(LMB[i,:] + LMB[j,:] + 2*standardBase(n,d‚ÇÅ + k) )] for k in 1:d‚ÇÇ ])    for i in 1:nb_mon, j in 1:nb_mon]

    return LocConDictX, LocConDictY
end
if testCode
    @testset "genSEP_Tr_localizing_Constriaints" begin
        LocConDictX, LocConDictY = genSEP_Tr_localizing_Constriaints(œÅ,t,x)
    end
end

function genSEPGTensLConsDict(œÅ,t,x,isWeak=false)
    @assert t > 1 "Hierarchy level too low. These constriants only hold for hiegher level steps of the hierarchy!"
    n = Int(2*sqrt(size(œÅ)[1]))
    LMB = GenMon(n, t-2)
    d‚ÇÅ,d‚ÇÇ = Int(n/2),Int(n/2)
    nb_mon  = size(LMB)[1]
    GTensLConsDict = Dict()
    # k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ = rand(1:d‚ÇÅ,(1,4))
    # e‚Çñ‚ÇÅ = standardBase(n,k‚ÇÅ)
    # e‚Çñ‚ÇÇ = standardBase(n, k‚ÇÇ)
    # e‚Çï‚ÇÅ = standardBase(n,d‚ÇÅ + h‚ÇÅ)
    # e‚Çï‚ÇÇ = standardBase(n,d‚ÇÅ + h‚ÇÇ)
    for k‚ÇÅ in 1:d‚ÇÅ
        e‚Çñ‚ÇÅ = standardBase(n,k‚ÇÅ)
        for k‚ÇÇ in 1:d‚ÇÅ
            e‚Çñ‚ÇÇ = standardBase(n, k‚ÇÇ)
            for h‚ÇÅ in 1:d‚ÇÇ
                e‚Çï‚ÇÅ = standardBase(n,d‚ÇÅ + h‚ÇÅ)
                for h‚ÇÇ in 1:d‚ÇÇ
                    e‚Çï‚ÇÇ = standardBase(n,d‚ÇÅ + h‚ÇÇ)
                    if  isWeak
                        # Constriants:  M((œÅ‚Çñ‚Çñ‚Çï‚Çï - x‚Çñ¬≤y‚Çï¬≤)‚ãÖL) on Diagonal blocks...
                        if k‚ÇÅ == k‚ÇÇ && h‚ÇÅ == h‚ÇÇ
                            GTensLConsDict[k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ] =  [œÅ[d‚ÇÅ*(k‚ÇÅ-1) + k‚ÇÇ, d‚ÇÇ*(h‚ÇÅ-1) + h‚ÇÇ]*x[transpose(LMB[i,:] + LMB[j,:] )] - x[transpose(LMB[i,:] + LMB[j,:] + 2*e‚Çñ‚ÇÅ + 2*e‚Çï‚ÇÅ)] for i in 1:nb_mon, j in 1:nb_mon ]
                        else
                            #... and Zero otherwise
                            GTensLConsDict[k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ] = zeros(nb_mon,nb_mon)
                        end
                    else
                        # Constriants:  M((œÅ‚Çñ‚ÇÅ‚Çñ‚ÇÇ‚Çï‚ÇÅ‚Çï‚ÇÇ - x‚Çñ‚ÇÅx‚Çñ‚ÇÇy‚Çï‚ÇÅy‚Çï‚ÇÇ)‚ãÖL)
                        GTensLConsDict[k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ] = [œÅ[d‚ÇÅ*(k‚ÇÅ-1) + k‚ÇÇ, d‚ÇÇ*(h‚ÇÅ-1) + h‚ÇÇ]*x[transpose(LMB[i,:] + LMB[j,:] )] - x[transpose(LMB[i,:] + LMB[j,:] + e‚Çñ‚ÇÅ + e‚Çï‚ÇÅ + e‚Çñ‚ÇÇ + e‚Çï‚ÇÇ)] for i in 1:nb_mon, j in 1:nb_mon ]
                    end
                end
            end
        end
    end
    return GTensLConsDict
end



function assembleSEPGTensLConsMat(d‚ÇÅ,d‚ÇÇ,GTensLConsDict)
    GTensLConMat  = []
    GTensLConCol = []
    for k‚ÇÅ in 1:d‚ÇÅ
        for h‚ÇÅ in 1:d‚ÇÇ
            for k‚ÇÇ in 1:d‚ÇÅ
                for h‚ÇÇ in 1:d‚ÇÇ
                    if k‚ÇÇ == 1 && h‚ÇÇ == 1
                        GTensLConCol = GTensLConsDict[k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ]
                    else
                        GTensLConCol = hcat(GTensLConCol, GTensLConsDict[k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ])
                    end
                end
            end
            println(size(GTensLConCol))
            if k‚ÇÅ == 1 && h‚ÇÅ == 1
                GTensLConMat  = GTensLConCol
            else
                GTensLConMat  = vcat(GTensLConMat,GTensLConCol)
            end
        end
    end
    return GTensLConMat
end

 k‚ÇÅ,k‚ÇÇ,h‚ÇÅ,h‚ÇÇ = rand(1:d‚ÇÅ,(1,4))

GTensLConsDict = genSEPGTensLConsDict(œÅ,t,x)
GTensLConMat = assembleSEPGTensLConsMat(d‚ÇÅ,d‚ÇÇ,GTensLConsDict)




"""M(G ‚äó L) ‚™∞ 0 constraints"""
function MakeGTensLConsMat(LocConDict, preWeakGTensLConsDict, n, isWeak=false)
    GœÅCon = []
    GœÅConRow = []


end
#@testset "genCPCons" begin
